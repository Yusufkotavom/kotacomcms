/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  timestamp,
  serial,
  numeric,
  boolean,
  jsonb,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_posts_status = pgEnum('enum_posts_status', ['draft', 'published'])
export const enum_posts_format = pgEnum('enum_posts_format', ['md', 'html'])
export const enum_projects_format = pgEnum('enum_projects_format', ['md', 'html'])
export const enum_products_status = pgEnum('enum_products_status', ['draft', 'published'])
export const enum_products_format = pgEnum('enum_products_format', ['md', 'html'])
export const enum_products_priority = pgEnum('enum_products_priority', [
  'featured',
  'bestseller',
  'sale',
  'new',
])
export const enum__products_v_version_status = pgEnum('enum__products_v_version_status', [
  'draft',
  'published',
])
export const enum__products_v_version_format = pgEnum('enum__products_v_version_format', [
  'md',
  'html',
])
export const enum__products_v_version_priority = pgEnum('enum__products_v_version_priority', [
  'featured',
  'bestseller',
  'sale',
  'new',
])
export const enum_services_format = pgEnum('enum_services_format', ['md', 'html'])
export const enum_pages_format = pgEnum('enum_pages_format', ['md', 'html'])

export const users_sessions = pgTable(
  'users_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('users_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('users_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
  }),
)

export const posts_category = pgTable(
  'posts_category',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value'),
  },
  (columns) => ({
    _orderIdx: index('posts_category_order_idx').on(columns._order),
    _parentIDIdx: index('posts_category_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_category_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const posts_tags = pgTable(
  'posts_tags',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value'),
  },
  (columns) => ({
    _orderIdx: index('posts_tags_order_idx').on(columns._order),
    _parentIDIdx: index('posts_tags_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_tags_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const posts = pgTable(
  'posts',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug').notNull(),
    status: enum_posts_status('status').default('draft'),
    description: varchar('description'),
    published: timestamp('published', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    lastUpdated: timestamp('last_updated', { mode: 'string', withTimezone: true, precision: 3 }),
    coverImage: varchar('cover_image'),
    body: varchar('body'),
    format: enum_posts_format('format').default('md'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    posts_slug_idx: uniqueIndex('posts_slug_idx').on(columns.slug),
    posts_updated_at_idx: index('posts_updated_at_idx').on(columns.updatedAt),
    posts_created_at_idx: index('posts_created_at_idx').on(columns.createdAt),
  }),
)

export const projects_category = pgTable(
  'projects_category',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value'),
  },
  (columns) => ({
    _orderIdx: index('projects_category_order_idx').on(columns._order),
    _parentIDIdx: index('projects_category_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [projects.id],
      name: 'projects_category_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const projects_country = pgTable(
  'projects_country',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value'),
  },
  (columns) => ({
    _orderIdx: index('projects_country_order_idx').on(columns._order),
    _parentIDIdx: index('projects_country_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [projects.id],
      name: 'projects_country_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const projects_locale = pgTable(
  'projects_locale',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value'),
  },
  (columns) => ({
    _orderIdx: index('projects_locale_order_idx').on(columns._order),
    _parentIDIdx: index('projects_locale_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [projects.id],
      name: 'projects_locale_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const projects_cost = pgTable(
  'projects_cost',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value'),
  },
  (columns) => ({
    _orderIdx: index('projects_cost_order_idx').on(columns._order),
    _parentIDIdx: index('projects_cost_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [projects.id],
      name: 'projects_cost_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const projects = pgTable(
  'projects',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug').notNull(),
    organiser: varchar('organiser'),
    imageUrl: varchar('image_url'),
    published: timestamp('published', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    description: varchar('description'),
    body: varchar('body'),
    format: enum_projects_format('format').default('md'),
    url: varchar('url'),
    gygUrl: varchar('gyg_url'),
    mapsUrl: varchar('maps_url'),
    verify: varchar('verify'),
    review: varchar('review'),
    getInvolved: varchar('get_involved'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    projects_slug_idx: uniqueIndex('projects_slug_idx').on(columns.slug),
    projects_updated_at_idx: index('projects_updated_at_idx').on(columns.updatedAt),
    projects_created_at_idx: index('projects_created_at_idx').on(columns.createdAt),
  }),
)

export const products_category = pgTable(
  'products_category',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value'),
  },
  (columns) => ({
    _orderIdx: index('products_category_order_idx').on(columns._order),
    _parentIDIdx: index('products_category_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_category_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_country = pgTable(
  'products_country',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value'),
  },
  (columns) => ({
    _orderIdx: index('products_country_order_idx').on(columns._order),
    _parentIDIdx: index('products_country_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_country_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_locale = pgTable(
  'products_locale',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value'),
  },
  (columns) => ({
    _orderIdx: index('products_locale_order_idx').on(columns._order),
    _parentIDIdx: index('products_locale_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_locale_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_features = pgTable(
  'products_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value'),
  },
  (columns) => ({
    _orderIdx: index('products_features_order_idx').on(columns._order),
    _parentIDIdx: index('products_features_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_type = pgTable(
  'products_type',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value'),
  },
  (columns) => ({
    _orderIdx: index('products_type_order_idx').on(columns._order),
    _parentIDIdx: index('products_type_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_type_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_target_audience = pgTable(
  'products_target_audience',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value'),
  },
  (columns) => ({
    _orderIdx: index('products_target_audience_order_idx').on(columns._order),
    _parentIDIdx: index('products_target_audience_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_target_audience_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products = pgTable(
  'products',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    slug: varchar('slug'),
    status: enum_products_status('status').default('draft'),
    imageUrl: varchar('image_url'),
    price: varchar('price'),
    published: timestamp('published', { mode: 'string', withTimezone: true, precision: 3 }),
    description: varchar('description'),
    body: varchar('body'),
    format: enum_products_format('format').default('md'),
    verify: varchar('verify'),
    imageUrl2: varchar('image_url2'),
    imageUrl3: varchar('image_url3'),
    review: varchar('review'),
    name: varchar('name'),
    url: varchar('url'),
    otherUrl: varchar('other_url'),
    tokopediaUrl: varchar('tokopedia_url'),
    shopeeUrl: varchar('shopee_url'),
    blibliUrl: varchar('blibli_url'),
    bukalapakUrl: varchar('bukalapak_url'),
    lazadaUrl: varchar('lazada_url'),
    mapsUrl: varchar('maps_url'),
    affiliateCode: varchar('affiliate_code'),
    commissionRate: varchar('commission_rate'),
    affiliateProvider: varchar('affiliate_provider'),
    discountCode: varchar('discount_code'),
    specialOffer: varchar('special_offer'),
    ctaText: varchar('cta_text'),
    priority: enum_products_priority('priority'),
    externalRating: varchar('external_rating'),
    soldCount: varchar('sold_count'),
    originalPrice: varchar('original_price'),
    isSponsored: boolean('is_sponsored').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_products_status('_status').default('draft'),
  },
  (columns) => ({
    products_slug_idx: uniqueIndex('products_slug_idx').on(columns.slug),
    products_updated_at_idx: index('products_updated_at_idx').on(columns.updatedAt),
    products_created_at_idx: index('products_created_at_idx').on(columns.createdAt),
    products__status_idx: index('products__status_idx').on(columns._status),
  }),
)

export const _products_v_version_category = pgTable(
  '_products_v_version_category',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    value: varchar('value'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_version_category_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_version_category_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_version_category_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_version_country = pgTable(
  '_products_v_version_country',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    value: varchar('value'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_version_country_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_version_country_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_version_country_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_version_locale = pgTable(
  '_products_v_version_locale',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    value: varchar('value'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_version_locale_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_version_locale_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_version_locale_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_version_features = pgTable(
  '_products_v_version_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    value: varchar('value'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_version_features_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_version_features_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_version_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_version_type = pgTable(
  '_products_v_version_type',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    value: varchar('value'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_version_type_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_version_type_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_version_type_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_version_target_audience = pgTable(
  '_products_v_version_target_audience',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    value: varchar('value'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_version_target_audience_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_version_target_audience_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_version_target_audience_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v = pgTable(
  '_products_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => products.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_slug: varchar('version_slug'),
    version_status: enum__products_v_version_status('version_status').default('draft'),
    version_imageUrl: varchar('version_image_url'),
    version_price: varchar('version_price'),
    version_published: timestamp('version_published', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_description: varchar('version_description'),
    version_body: varchar('version_body'),
    version_format: enum__products_v_version_format('version_format').default('md'),
    version_verify: varchar('version_verify'),
    version_imageUrl2: varchar('version_image_url2'),
    version_imageUrl3: varchar('version_image_url3'),
    version_review: varchar('version_review'),
    version_name: varchar('version_name'),
    version_url: varchar('version_url'),
    version_otherUrl: varchar('version_other_url'),
    version_tokopediaUrl: varchar('version_tokopedia_url'),
    version_shopeeUrl: varchar('version_shopee_url'),
    version_blibliUrl: varchar('version_blibli_url'),
    version_bukalapakUrl: varchar('version_bukalapak_url'),
    version_lazadaUrl: varchar('version_lazada_url'),
    version_mapsUrl: varchar('version_maps_url'),
    version_affiliateCode: varchar('version_affiliate_code'),
    version_commissionRate: varchar('version_commission_rate'),
    version_affiliateProvider: varchar('version_affiliate_provider'),
    version_discountCode: varchar('version_discount_code'),
    version_specialOffer: varchar('version_special_offer'),
    version_ctaText: varchar('version_cta_text'),
    version_priority: enum__products_v_version_priority('version_priority'),
    version_externalRating: varchar('version_external_rating'),
    version_soldCount: varchar('version_sold_count'),
    version_originalPrice: varchar('version_original_price'),
    version_isSponsored: boolean('version_is_sponsored').default(false),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__products_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _products_v_parent_idx: index('_products_v_parent_idx').on(columns.parent),
    _products_v_version_version_slug_idx: index('_products_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _products_v_version_version_updated_at_idx: index(
      '_products_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _products_v_version_version_created_at_idx: index(
      '_products_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _products_v_version_version__status_idx: index('_products_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _products_v_created_at_idx: index('_products_v_created_at_idx').on(columns.createdAt),
    _products_v_updated_at_idx: index('_products_v_updated_at_idx').on(columns.updatedAt),
    _products_v_latest_idx: index('_products_v_latest_idx').on(columns.latest),
    _products_v_autosave_idx: index('_products_v_autosave_idx').on(columns.autosave),
  }),
)

export const services_category = pgTable(
  'services_category',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value'),
  },
  (columns) => ({
    _orderIdx: index('services_category_order_idx').on(columns._order),
    _parentIDIdx: index('services_category_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [services.id],
      name: 'services_category_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const services_wilayah = pgTable(
  'services_wilayah',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value'),
  },
  (columns) => ({
    _orderIdx: index('services_wilayah_order_idx').on(columns._order),
    _parentIDIdx: index('services_wilayah_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [services.id],
      name: 'services_wilayah_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const services_type = pgTable(
  'services_type',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value'),
  },
  (columns) => ({
    _orderIdx: index('services_type_order_idx').on(columns._order),
    _parentIDIdx: index('services_type_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [services.id],
      name: 'services_type_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const services = pgTable(
  'services',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug').notNull(),
    imageUrl1: varchar('image_url1'),
    published: timestamp('published', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    provider: varchar('provider'),
    price: varchar('price'),
    url: varchar('url'),
    whatsappUrl: varchar('whatsapp_url'),
    mapsUrl: varchar('maps_url'),
    verify: varchar('verify'),
    body: varchar('body'),
    format: enum_services_format('format').default('md'),
    imageUrl2: varchar('image_url2'),
    imageUrl3: varchar('image_url3'),
    review: varchar('review'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    services_slug_idx: uniqueIndex('services_slug_idx').on(columns.slug),
    services_updated_at_idx: index('services_updated_at_idx').on(columns.updatedAt),
    services_created_at_idx: index('services_created_at_idx').on(columns.createdAt),
  }),
)

export const pages = pgTable(
  'pages',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug').notNull(),
    description: varchar('description'),
    publishDate: timestamp('publish_date', { mode: 'string', withTimezone: true, precision: 3 }),
    author: varchar('author'),
    image: varchar('image'),
    draft: boolean('draft').default(false),
    body: varchar('body'),
    format: enum_pages_format('format').default('md'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    pages_slug_idx: uniqueIndex('pages_slug_idx').on(columns.slug),
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    postsID: integer('posts_id'),
    projectsID: integer('projects_id'),
    productsID: integer('products_id'),
    servicesID: integer('services_id'),
    pagesID: integer('pages_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_posts_id_idx: index(
      'payload_locked_documents_rels_posts_id_idx',
    ).on(columns.postsID),
    payload_locked_documents_rels_projects_id_idx: index(
      'payload_locked_documents_rels_projects_id_idx',
    ).on(columns.projectsID),
    payload_locked_documents_rels_products_id_idx: index(
      'payload_locked_documents_rels_products_id_idx',
    ).on(columns.productsID),
    payload_locked_documents_rels_services_id_idx: index(
      'payload_locked_documents_rels_services_id_idx',
    ).on(columns.servicesID),
    payload_locked_documents_rels_pages_id_idx: index(
      'payload_locked_documents_rels_pages_id_idx',
    ).on(columns.pagesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'payload_locked_documents_rels_posts_fk',
    }).onDelete('cascade'),
    projectsIdFk: foreignKey({
      columns: [columns['projectsID']],
      foreignColumns: [projects.id],
      name: 'payload_locked_documents_rels_projects_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'payload_locked_documents_rels_products_fk',
    }).onDelete('cascade'),
    servicesIdFk: foreignKey({
      columns: [columns['servicesID']],
      foreignColumns: [services.id],
      name: 'payload_locked_documents_rels_services_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: 'sessions',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: 'sessions',
  }),
}))
export const relations_media = relations(media, () => ({}))
export const relations_posts_category = relations(posts_category, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_category._parentID],
    references: [posts.id],
    relationName: 'category',
  }),
}))
export const relations_posts_tags = relations(posts_tags, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_tags._parentID],
    references: [posts.id],
    relationName: 'tags',
  }),
}))
export const relations_posts = relations(posts, ({ many }) => ({
  category: many(posts_category, {
    relationName: 'category',
  }),
  tags: many(posts_tags, {
    relationName: 'tags',
  }),
}))
export const relations_projects_category = relations(projects_category, ({ one }) => ({
  _parentID: one(projects, {
    fields: [projects_category._parentID],
    references: [projects.id],
    relationName: 'category',
  }),
}))
export const relations_projects_country = relations(projects_country, ({ one }) => ({
  _parentID: one(projects, {
    fields: [projects_country._parentID],
    references: [projects.id],
    relationName: 'country',
  }),
}))
export const relations_projects_locale = relations(projects_locale, ({ one }) => ({
  _parentID: one(projects, {
    fields: [projects_locale._parentID],
    references: [projects.id],
    relationName: 'locale',
  }),
}))
export const relations_projects_cost = relations(projects_cost, ({ one }) => ({
  _parentID: one(projects, {
    fields: [projects_cost._parentID],
    references: [projects.id],
    relationName: 'cost',
  }),
}))
export const relations_projects = relations(projects, ({ many }) => ({
  category: many(projects_category, {
    relationName: 'category',
  }),
  country: many(projects_country, {
    relationName: 'country',
  }),
  locale: many(projects_locale, {
    relationName: 'locale',
  }),
  cost: many(projects_cost, {
    relationName: 'cost',
  }),
}))
export const relations_products_category = relations(products_category, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_category._parentID],
    references: [products.id],
    relationName: 'category',
  }),
}))
export const relations_products_country = relations(products_country, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_country._parentID],
    references: [products.id],
    relationName: 'country',
  }),
}))
export const relations_products_locale = relations(products_locale, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_locale._parentID],
    references: [products.id],
    relationName: 'locale',
  }),
}))
export const relations_products_features = relations(products_features, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_features._parentID],
    references: [products.id],
    relationName: 'features',
  }),
}))
export const relations_products_type = relations(products_type, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_type._parentID],
    references: [products.id],
    relationName: 'type',
  }),
}))
export const relations_products_target_audience = relations(
  products_target_audience,
  ({ one }) => ({
    _parentID: one(products, {
      fields: [products_target_audience._parentID],
      references: [products.id],
      relationName: 'targetAudience',
    }),
  }),
)
export const relations_products = relations(products, ({ many }) => ({
  category: many(products_category, {
    relationName: 'category',
  }),
  country: many(products_country, {
    relationName: 'country',
  }),
  locale: many(products_locale, {
    relationName: 'locale',
  }),
  features: many(products_features, {
    relationName: 'features',
  }),
  type: many(products_type, {
    relationName: 'type',
  }),
  targetAudience: many(products_target_audience, {
    relationName: 'targetAudience',
  }),
}))
export const relations__products_v_version_category = relations(
  _products_v_version_category,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_category._parentID],
      references: [_products_v.id],
      relationName: 'version_category',
    }),
  }),
)
export const relations__products_v_version_country = relations(
  _products_v_version_country,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_country._parentID],
      references: [_products_v.id],
      relationName: 'version_country',
    }),
  }),
)
export const relations__products_v_version_locale = relations(
  _products_v_version_locale,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_locale._parentID],
      references: [_products_v.id],
      relationName: 'version_locale',
    }),
  }),
)
export const relations__products_v_version_features = relations(
  _products_v_version_features,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_features._parentID],
      references: [_products_v.id],
      relationName: 'version_features',
    }),
  }),
)
export const relations__products_v_version_type = relations(
  _products_v_version_type,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_type._parentID],
      references: [_products_v.id],
      relationName: 'version_type',
    }),
  }),
)
export const relations__products_v_version_target_audience = relations(
  _products_v_version_target_audience,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_target_audience._parentID],
      references: [_products_v.id],
      relationName: 'version_targetAudience',
    }),
  }),
)
export const relations__products_v = relations(_products_v, ({ one, many }) => ({
  parent: one(products, {
    fields: [_products_v.parent],
    references: [products.id],
    relationName: 'parent',
  }),
  version_category: many(_products_v_version_category, {
    relationName: 'version_category',
  }),
  version_country: many(_products_v_version_country, {
    relationName: 'version_country',
  }),
  version_locale: many(_products_v_version_locale, {
    relationName: 'version_locale',
  }),
  version_features: many(_products_v_version_features, {
    relationName: 'version_features',
  }),
  version_type: many(_products_v_version_type, {
    relationName: 'version_type',
  }),
  version_targetAudience: many(_products_v_version_target_audience, {
    relationName: 'version_targetAudience',
  }),
}))
export const relations_services_category = relations(services_category, ({ one }) => ({
  _parentID: one(services, {
    fields: [services_category._parentID],
    references: [services.id],
    relationName: 'category',
  }),
}))
export const relations_services_wilayah = relations(services_wilayah, ({ one }) => ({
  _parentID: one(services, {
    fields: [services_wilayah._parentID],
    references: [services.id],
    relationName: 'wilayah',
  }),
}))
export const relations_services_type = relations(services_type, ({ one }) => ({
  _parentID: one(services, {
    fields: [services_type._parentID],
    references: [services.id],
    relationName: 'type',
  }),
}))
export const relations_services = relations(services, ({ many }) => ({
  category: many(services_category, {
    relationName: 'category',
  }),
  wilayah: many(services_wilayah, {
    relationName: 'wilayah',
  }),
  type: many(services_type, {
    relationName: 'type',
  }),
}))
export const relations_pages = relations(pages, () => ({}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: 'posts',
    }),
    projectsID: one(projects, {
      fields: [payload_locked_documents_rels.projectsID],
      references: [projects.id],
      relationName: 'projects',
    }),
    productsID: one(products, {
      fields: [payload_locked_documents_rels.productsID],
      references: [products.id],
      relationName: 'products',
    }),
    servicesID: one(services, {
      fields: [payload_locked_documents_rels.servicesID],
      references: [services.id],
      relationName: 'services',
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  enum_posts_status: typeof enum_posts_status
  enum_posts_format: typeof enum_posts_format
  enum_projects_format: typeof enum_projects_format
  enum_products_status: typeof enum_products_status
  enum_products_format: typeof enum_products_format
  enum_products_priority: typeof enum_products_priority
  enum__products_v_version_status: typeof enum__products_v_version_status
  enum__products_v_version_format: typeof enum__products_v_version_format
  enum__products_v_version_priority: typeof enum__products_v_version_priority
  enum_services_format: typeof enum_services_format
  enum_pages_format: typeof enum_pages_format
  users_sessions: typeof users_sessions
  users: typeof users
  media: typeof media
  posts_category: typeof posts_category
  posts_tags: typeof posts_tags
  posts: typeof posts
  projects_category: typeof projects_category
  projects_country: typeof projects_country
  projects_locale: typeof projects_locale
  projects_cost: typeof projects_cost
  projects: typeof projects
  products_category: typeof products_category
  products_country: typeof products_country
  products_locale: typeof products_locale
  products_features: typeof products_features
  products_type: typeof products_type
  products_target_audience: typeof products_target_audience
  products: typeof products
  _products_v_version_category: typeof _products_v_version_category
  _products_v_version_country: typeof _products_v_version_country
  _products_v_version_locale: typeof _products_v_version_locale
  _products_v_version_features: typeof _products_v_version_features
  _products_v_version_type: typeof _products_v_version_type
  _products_v_version_target_audience: typeof _products_v_version_target_audience
  _products_v: typeof _products_v
  services_category: typeof services_category
  services_wilayah: typeof services_wilayah
  services_type: typeof services_type
  services: typeof services
  pages: typeof pages
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_users_sessions: typeof relations_users_sessions
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_posts_category: typeof relations_posts_category
  relations_posts_tags: typeof relations_posts_tags
  relations_posts: typeof relations_posts
  relations_projects_category: typeof relations_projects_category
  relations_projects_country: typeof relations_projects_country
  relations_projects_locale: typeof relations_projects_locale
  relations_projects_cost: typeof relations_projects_cost
  relations_projects: typeof relations_projects
  relations_products_category: typeof relations_products_category
  relations_products_country: typeof relations_products_country
  relations_products_locale: typeof relations_products_locale
  relations_products_features: typeof relations_products_features
  relations_products_type: typeof relations_products_type
  relations_products_target_audience: typeof relations_products_target_audience
  relations_products: typeof relations_products
  relations__products_v_version_category: typeof relations__products_v_version_category
  relations__products_v_version_country: typeof relations__products_v_version_country
  relations__products_v_version_locale: typeof relations__products_v_version_locale
  relations__products_v_version_features: typeof relations__products_v_version_features
  relations__products_v_version_type: typeof relations__products_v_version_type
  relations__products_v_version_target_audience: typeof relations__products_v_version_target_audience
  relations__products_v: typeof relations__products_v
  relations_services_category: typeof relations_services_category
  relations_services_wilayah: typeof relations_services_wilayah
  relations_services_type: typeof relations_services_type
  relations_services: typeof relations_services
  relations_pages: typeof relations_pages
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
